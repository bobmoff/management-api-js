// This file is auto-generated by @hey-api/openapi-ts

export type success_response = {
  message?: string;
  code?: string;
};

export type error = {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message.
   */
  message?: string;
};

export type error_response = {
  errors?: Array<error>;
};

export type user = {
  /**
   * Unique id of the user in Kinde.
   */
  id?: string;
  /**
   * External id for user.
   */
  provided_id?: string;
  /**
   * Default email address of the user in Kinde.
   */
  preferred_email?: string;
  /**
   * Primary username of the user in Kinde.
   */
  username?: string;
  /**
   * User's last name.
   */
  last_name?: string;
  /**
   * User's first name.
   */
  first_name?: string;
  /**
   * Whether the user is currently suspended or not.
   */
  is_suspended?: boolean;
  /**
   * User's profile picture URL.
   */
  picture?: string;
  /**
   * Total number of user sign ins.
   */
  total_sign_ins?: number | null;
  /**
   * Number of consecutive failed user sign ins.
   */
  failed_sign_ins?: number | null;
  /**
   * Last sign in date in ISO 8601 format.
   */
  last_signed_in?: string | null;
  /**
   * Date of user creation in ISO 8601 format.
   */
  created_on?: string | null;
  /**
   * Array of organizations a user belongs to.
   */
  organizations?: Array<string>;
  /**
   * Array of identities belonging to the user.
   */
  identities?: Array<{
    type?: string;
    identity?: string;
  }>;
};

export type update_user_response = {
  /**
   * Unique id of the user in Kinde.
   */
  id?: string;
  /**
   * User's first name.
   */
  given_name?: string;
  /**
   * User's last name.
   */
  family_name?: string;
  /**
   * User's preferred email.
   */
  email?: string;
  /**
   * Whether the user is currently suspended or not.
   */
  is_suspended?: boolean;
  /**
   * Whether a password reset has been requested.
   */
  is_password_reset_requested?: boolean;
  /**
   * User's profile picture URL.
   */
  picture?: string;
};

/**
 * Array of users.
 */
export type users = Array<user>;

export type users_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  users?: Array<{
    /**
     * Unique id of the user in Kinde.
     */
    id?: string;
    /**
     * External id for user.
     */
    provided_id?: string;
    /**
     * Default email address of the user in Kinde.
     */
    email?: string;
    /**
     * Primary username of the user in Kinde.
     */
    username?: string;
    /**
     * User's last name.
     */
    last_name?: string;
    /**
     * User's first name.
     */
    first_name?: string;
    /**
     * Whether the user is currently suspended or not.
     */
    is_suspended?: boolean;
    /**
     * User's profile picture URL.
     */
    picture?: string;
    /**
     * Total number of user sign ins.
     */
    total_sign_ins?: number | null;
    /**
     * Number of consecutive failed user sign ins.
     */
    failed_sign_ins?: number | null;
    /**
     * Last sign in date in ISO 8601 format.
     */
    last_signed_in?: string | null;
    /**
     * Date of user creation in ISO 8601 format.
     */
    created_on?: string | null;
    /**
     * Array of organizations a user belongs to.
     */
    organizations?: Array<string>;
    /**
     * Array of identities belonging to the user.
     */
    identities?: Array<{
      type?: string;
      identity?: string;
    }>;
  }>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type create_user_response = {
  /**
   * Unique id of the user in Kinde.
   */
  id?: string;
  /**
   * True if the user was successfully created.
   */
  created?: boolean;
  identities?: Array<user_identity>;
};

export type create_organization_response = {
  message?: string;
  code?: string;
  organization?: {
    /**
     * The organization's code.
     */
    code?: string;
  };
};

export type user_identity = {
  /**
   * The type of identity object created.
   */
  type?: string;
  /**
   * The result of the user creation operation.
   */
  result?: {
    /**
     * True if the user identity was successfully created.
     */
    created?: boolean;
  };
};

export type user_profile = {
  /**
   * Unique id of the user in Kinde.
   */
  id?: string;
  /**
   * Default email address of the user in Kinde.
   */
  preferred_email?: string;
  /**
   * Primary username of the user in Kinde.
   */
  username?: string;
  /**
   * Value of the user's id in a third-party system when the user is imported into Kinde.
   */
  provided_id?: string | null;
  /**
   * User's last name.
   */
  last_name?: string;
  /**
   * User's first name.
   */
  first_name?: string;
  /**
   * URL that point's to the user's picture or avatar
   */
  picture?: string;
};

export type create_property_response = {
  message?: string;
  code?: string;
  property?: {
    /**
     * The property's ID.
     */
    id?: string;
  };
};

export type get_properties_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  properties?: Array<property>;
  /**
   * Whether more records exist.
   */
  has_more?: boolean;
};

export type get_property_values_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  properties?: Array<property_value>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type create_category_response = {
  message?: string;
  code?: string;
  category?: {
    /**
     * The category's ID.
     */
    id?: string;
  };
};

export type get_categories_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  categories?: Array<category>;
  /**
   * Whether more records exist.
   */
  has_more?: boolean;
};

export type get_event_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  event?: {
    type?: string;
    source?: string;
    event_id?: string;
    /**
     * Timestamp in ISO 8601 format.
     */
    timestamp?: string;
    /**
     * Event specific data object.
     */
    data?: {
      [key: string]: unknown;
    };
  };
};

export type get_event_types_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  event_types?: Array<event_type>;
};

export type get_webhooks_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  webhooks?: Array<webhook>;
};

export type webhook = {
  id?: string;
  name?: string;
  endpoint?: string;
  description?: string;
  event_types?: Array<string>;
  /**
   * Created on date in ISO 8601 format.
   */
  created_on?: string;
};

export type create_webhook_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  webhook?: {
    id?: string;
    endpoint?: string;
  };
};

export type update_webhook_response = {
  message?: string;
  code?: string;
  webhook?: {
    id?: string;
  };
};

export type create_connection_response = {
  message?: string;
  code?: string;
  connection?: {
    /**
     * The connection's ID.
     */
    id?: string;
  };
};

export type get_connections_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  connections?: Array<connection>;
  /**
   * Whether more records exist.
   */
  has_more?: boolean;
};

export type delete_webhook_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
};

export type event_type = {
  id?: string;
  code?: string;
  name?: string;
  origin?: string;
  schema?: {
    [key: string]: unknown;
  };
};

export type token_introspect = {
  /**
   * Indicates the status of the token.
   */
  active?: boolean;
  /**
   * Array of intended token recipients.
   */
  aud?: Array<string>;
  /**
   * Identifier for the requesting client.
   */
  client_id?: string;
  /**
   * Token expiration timestamp.
   */
  exp?: string;
  /**
   * Token issuance timestamp.
   */
  iat?: string;
};

export type token_error_response = {
  /**
   * Error.
   */
  error?: string;
  /**
   * The error description.
   */
  error_description?: string;
};

export type user_profile_v2 = {
  /**
   * Unique id of the user in Kinde (deprecated).
   */
  id?: string;
  /**
   * Unique id of the user in Kinde.
   */
  sub?: string;
  /**
   * Value of the user's id in a third-party system when the user is imported into Kinde.
   */
  provided_id?: string | null;
  /**
   * Users's first and last name separated by a space.
   */
  name?: string;
  /**
   * User's first name.
   */
  given_name?: string;
  /**
   * User's last name.
   */
  family_name?: string;
  /**
   * Date the user was last updated at (In Unix time).
   */
  updated_at?: number;
  /**
   * User's email address if available.
   */
  email?: string;
  /**
   * URL that point's to the user's picture or avatar
   */
  picture?: string;
};

export type organization = {
  code?: string;
  name?: string;
  is_default?: boolean;
  external_id?: string;
};

export type organization_user = {
  id?: string;
  email?: string;
  full_name?: string;
  last_name?: string;
  first_name?: string;
  picture?: string;
  roles?: Array<string>;
};

export type category = {
  id?: string;
  name?: string;
};

export type connection = {
  id?: string;
  name?: string;
  display_name?: string;
  strategy?: string;
};

export type property = {
  id?: string;
  key?: string;
  name?: string;
  is_private?: boolean;
  description?: string;
  is_kinde_property?: boolean;
};

export type property_value = {
  id?: string;
  name?: string;
  description?: string;
  key?: string;
  value?: string;
};

export type role = {
  id?: string;
  key?: string;
  name?: string;
  description?: string;
};

export type subscribers_subscriber = {
  id?: string;
  email?: string;
  full_name?: string;
  first_name?: string;
  last_name?: string;
};

export type subscriber = {
  id?: string;
  preferred_email?: string;
  first_name?: string;
  last_name?: string;
};

export type organization_user_role = {
  id?: string;
  key?: string;
  name?: string;
};

export type organization_user_role_permissions = {
  id?: string;
  role?: string;
  permissions?: {
    key?: string;
  };
};

export type organization_user_permission = {
  id?: string;
  key?: string;
  name?: string;
  description?: string;
  roles?: Array<{
    id?: string;
    key?: string;
  }>;
};

export type organization_users = Array<organization_user>;

export type get_subscriber_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  subscribers?: Array<subscriber>;
};

export type get_subscribers_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  subscribers?: Array<subscribers_subscriber>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type get_roles_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  roles?: Array<roles>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type get_organizations_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  organizations?: Array<organization>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type get_organization_users_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  organization_users?: Array<organization_user>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type get_organizations_user_roles_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  roles?: Array<organization_user_role>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type get_organizations_user_permissions_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  permissions?: Array<organization_user_permission>;
};

export type get_organization_feature_flags_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  /**
   * The environment's feature flag settings.
   */
  feature_flags?: {
    [key: string]: {
      type?: "str" | "int" | "bool";
      value?: string;
    };
  };
};

export type get_environment_feature_flags_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  /**
   * The environment's feature flag settings.
   */
  feature_flags?: {
    [key: string]: {
      type?: "str" | "int" | "bool";
      value?: string;
    };
  };
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type add_organization_users_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  users_added?: Array<string>;
};

export type update_role_permissions_response = {
  code?: string;
  message?: string;
  permissions_added?: Array<string>;
  permissions_removed?: Array<string>;
};

export type update_organization_users_response = {
  message?: string;
  users_added?: Array<string>;
  users_updated?: Array<string>;
  users_removed?: Array<string>;
};

export type connected_apps_auth_url = {
  /**
   * A URL that is used to authenticate an end-user against a connected app.
   */
  url?: string;
  /**
   * A unique identifier for the login session.
   */
  session_id?: string;
};

export type create_subscriber_success_response = {
  subscriber?: {
    /**
     * A unique identifier for the subscriber.
     */
    subscriber_id?: string;
  };
};

export type connected_apps_access_token = {
  /**
   * The access token to access a third-party provider.
   */
  access_token?: string;
  /**
   * The date and time that the access token expires.
   */
  access_token_expiry?: string;
};

export type api_result = {
  /**
   * The result of the api operation.
   */
  result?: string;
};

export type create_application_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  application?: {
    /**
     * The application's identifier.
     */
    id?: string;
    /**
     * The application's client id.
     */
    client_id?: string;
    /**
     * The application's client secret.
     */
    client_secret?: string;
  };
};

export type get_application_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  application?: {
    /**
     * The application's identifier.
     */
    id?: string;
    /**
     * The application's name.
     */
    name?: string;
    /**
     * The application's type.
     */
    type?: string;
    /**
     * The application's client id.
     */
    client_id?: string;
    /**
     * The application's client secret.
     */
    client_secret?: string;
  };
};

export type applications = {
  id?: string;
  name?: string;
  type?: string;
};

export type get_applications_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  applications?: Array<applications>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type redirect_callback_urls = {
  /**
   * An application's redirect URLs.
   */
  redirect_urls?: Array<string>;
};

export type get_redirect_callback_urls_response = {
  /**
   * An application's redirect callback URLs.
   */
  redirect_urls?: Array<redirect_callback_urls>;
};

export type logout_redirect_urls = {
  /**
   * An application's logout URLs.
   */
  redirect_urls?: Array<string>;
};

export type get_permissions_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  permissions?: Array<permissions>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type permissions = {
  /**
   * The permission's id.
   */
  id?: string;
  /**
   * The permission identifier to use in code.
   */
  key?: string;
  /**
   * The permission's name.
   */
  name?: string;
  /**
   * The permission's description.
   */
  description?: string;
};

export type roles = {
  /**
   * The role's id.
   */
  id?: string;
  /**
   * The role identifier to use in code.
   */
  key?: string;
  /**
   * The role's name.
   */
  name?: string;
  /**
   * The role's description.
   */
  description?: string;
};

export type roles_permission_response = Array<{
  id?: string;
  key?: string;
  name?: string;
  description?: string;
}>;

export type apis = {
  /**
   * Unique id of the API.
   */
  id?: string;
  /**
   * The API's name.
   */
  name?: string;
  /**
   * The logical identifier for the API.
   */
  audience?: string;
  /**
   * Whether it is the management API or not.
   */
  is_management_api?: boolean;
};

export type api = {
  /**
   * The API's unique identifier.
   */
  id?: string;
  /**
   * Response code.
   */
  code?: string;
  /**
   * The API's name.
   */
  name?: string;
  /**
   * Response message.
   */
  message?: string;
  /**
   * The API's audience.
   */
  audience?: string;
  applications?: Array<{
    id?: string;
    name?: string;
    type?: string;
    is_active?: boolean;
  }>;
};

export type GetUserResponse = user_profile;

export type TokenIntrospectionData = {
  /**
   * Token details.
   */
  formData: {
    /**
     * The token to be introspected.
     */
    token?: string;
    /**
     * The provided token's type.
     */
    token_type?: string;
  };
};

export type TokenIntrospectionResponse = token_introspect;

export type TokenRevocationData = {
  /**
   * Details of the token to be revoked.
   */
  formData: {
    /**
     * The token to be revoked.
     */
    token?: string;
    /**
     * The identifier for your client.
     */
    client_id?: string;
    /**
     * The secret associated with your client.
     */
    client_secret?: string;
  };
};

export type TokenRevocationResponse = unknown;

export type GetUserProfileV2Response = user_profile_v2;

export type GetApIsResponse = apis;

export type AddApIsData = {
  /**
   * API details.
   */
  requestBody: {
    name: string;
    audience: string;
  };
};

export type AddApIsResponse = success_response;

export type GetApiData = {
  /**
   * The API's id.
   */
  apiId: string;
};

export type GetApiResponse = api;

export type DeleteApiData = {
  /**
   * The API's id.
   */
  apiId: string;
};

export type DeleteApiResponse = success_response;

export type UpdateApiApplicationsData = {
  /**
   * The identifier for the API.
   */
  apiId: string;
  /**
   * The applications you want to connect or disconnect.
   */
  requestBody: {
    applications: Array<{
      /**
       * The application's id.
       */
      id: string;
      /**
       * Optional operation, set to 'delete' to remove the user from the organization.
       */
      operation?: string;
    }>;
  };
};

export type UpdateApiApplicationsResponse = success_response;

export type GetApplicationsData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Field and order to sort the result by.
   */
  sort?: "name_asc" | "name_desc" | null;
};

export type GetApplicationsResponse = get_applications_response;

export type CreateApplicationData = {
  /**
   * Application details.
   */
  requestBody?: {
    /**
     * The application's name.
     */
    name?: string;
    /**
     * The application's type.
     */
    type?: "reg" | "spa" | "m2m";
  };
};

export type CreateApplicationResponse = create_application_response;

export type GetApplicationData = {
  /**
   * The identifier for the application.
   */
  applicationId: string;
};

export type GetApplicationResponse = get_application_response;

export type UpdateApplicationData = {
  /**
   * The identifier for the application.
   */
  applicationId: string;
  /**
   * Application details.
   */
  requestBody?: {
    /**
     * The application's name.
     */
    name?: string;
    /**
     * The application's language key.
     */
    language_key?: string;
    /**
     * The application's logout uris.
     */
    logout_uris?: Array<string>;
    /**
     * The application's redirect uris.
     */
    redirect_uris?: Array<string>;
  };
};

export type UpdateApplicationResponse = unknown;

export type DeleteApplicationData = {
  /**
   * The identifier for the application.
   */
  applicationId: string;
};

export type DeleteApplicationResponse = success_response;

export type GetApplicationConnectionsData = {
  /**
   * The identifier/client ID for the application.
   */
  applicationId: string;
};

export type GetApplicationConnectionsResponse = get_connections_response;

export type EnableConnectionData = {
  /**
   * The identifier/client ID for the application.
   */
  applicationId: string;
  /**
   * The identifier for the connection.
   */
  connectionId: string;
};

export type EnableConnectionResponse = unknown;

export type RemoveConnectionData = {
  /**
   * The identifier/client ID for the application.
   */
  applicationId: string;
  /**
   * The identifier for the connection.
   */
  connectionId: string;
};

export type RemoveConnectionResponse = success_response;

export type GetBusinessData = {
  /**
   * Business code.
   */
  code: string;
  /**
   * Email associated with business.
   */
  email: string;
  /**
   * The industry your business is in.
   */
  industry?: string;
  /**
   * Business name.
   */
  name: string;
  /**
   * Phone number associated with business.
   */
  phone?: string | null;
  /**
   * Your Privacy policy URL.
   */
  privacyUrl?: string | null;
  /**
   * Your Terms and Conditions URL.
   */
  termsUrl?: string | null;
  /**
   * The timezone your business is in.
   */
  timezone?: string;
};

export type GetBusinessResponse = success_response;

export type UpdateBusinessData = {
  /**
   * Business name.
   */
  businessName: string;
  /**
   * The key of the industry your business is in.
   */
  industryKey?: string;
  /**
   * Show a policy acceptance checkbox on sign up.
   */
  isClickWrap?: boolean | null;
  /**
   * Display "Powered by Kinde" on your sign up, sign in, and subscription pages.
   */
  isShowKindeBranding?: string | null;
  /**
   * Your Kinde Perk code.
   */
  partnerCode?: string | null;
  /**
   * Email associated with business.
   */
  primaryEmail: string;
  /**
   * Phone number associated with business.
   */
  primaryPhone?: string | null;
  /**
   * Your Privacy policy URL.
   */
  privacyUrl?: string | null;
  /**
   * Your Terms and Conditions URL.
   */
  termsUrl?: string | null;
  /**
   * The ID of the timezone your business is in.
   */
  timezoneId?: string;
};

export type UpdateBusinessResponse = success_response;

export type GetIndustriesData = {
  /**
   * Industry Key.
   */
  industryKey?: string;
  /**
   * Industry name.
   */
  name?: string;
};

export type GetIndustriesResponse = success_response;

export type GetTimezonesData = {
  /**
   * Timezone.
   */
  name?: string;
  /**
   * Timezone Key.
   */
  timezoneKey?: string;
};

export type GetTimezonesResponse = success_response;

export type GetCallbackUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
};

export type GetCallbackUrLsResponse = redirect_callback_urls;

export type AddRedirectCallbackUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
  /**
   * Callback details.
   */
  requestBody: {
    /**
     * Array of callback urls.
     */
    urls?: Array<string>;
  };
};

export type AddRedirectCallbackUrLsResponse = success_response;

export type ReplaceRedirectCallbackUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
  /**
   * Callback details.
   */
  requestBody: {
    /**
     * Array of callback urls.
     */
    urls?: Array<string>;
  };
};

export type ReplaceRedirectCallbackUrLsResponse = success_response;

export type DeleteCallbackUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
  /**
   * Urls to delete, comma separated and url encoded.
   */
  urls: string;
};

export type DeleteCallbackUrLsResponse = success_response;

export type GetLogoutUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
};

export type GetLogoutUrLsResponse = logout_redirect_urls;

export type AddLogoutRedirectUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
  /**
   * Callback details.
   */
  requestBody: {
    /**
     * Array of logout urls.
     */
    urls?: Array<string>;
  };
};

export type AddLogoutRedirectUrLsResponse = success_response;

export type ReplaceLogoutRedirectUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
  /**
   * Callback details.
   */
  requestBody: {
    /**
     * Array of logout urls.
     */
    urls?: Array<string>;
  };
};

export type ReplaceLogoutRedirectUrLsResponse = success_response;

export type DeleteLogoutUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
  /**
   * Urls to delete, comma separated and url encoded.
   */
  urls: string;
};

export type DeleteLogoutUrLsResponse = success_response;

export type GetConnectedAppAuthUrlData = {
  /**
   * The unique key code reference of the connected app to authenticate against.
   */
  keyCodeRef: string;
  /**
   * The code of the Kinde organization that needs to authenticate to the third-party connected app.
   */
  orgCode?: string;
  /**
   * A URL that overrides the default callback URL setup in your connected app configuration
   */
  overrideCallbackUrl?: string;
  /**
   * The id of the user that needs to authenticate to the third-party connected app.
   */
  userId?: string;
};

export type GetConnectedAppAuthUrlResponse = connected_apps_auth_url;

export type GetConnectedAppTokenData = {
  /**
   * The unique sesssion id reprensenting the login session of a user.
   */
  sessionId: string;
};

export type GetConnectedAppTokenResponse = connected_apps_access_token;

export type RevokeConnectedAppTokenData = {
  /**
   * The unique sesssion id reprensenting the login session of a user.
   */
  sessionId: string;
};

export type RevokeConnectedAppTokenResponse = success_response;

export type GetConnectionsData = {
  /**
   * The ID of the connection to end before.
   */
  endingBefore?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * The ID of the connection to start after.
   */
  startingAfter?: string | null;
};

export type GetConnectionsResponse = get_connections_response;

export type CreateConnectionData = {
  /**
   * Connection details.
   */
  requestBody: {
    /**
     * The internal name of the connection.
     */
    name: string;
    /**
     * The public facing name of the connection.
     */
    display_name: string;
    /**
     * The identity provider identifier for the connection.
     */
    strategy:
      | "oauth2:apple"
      | "oauth2:azure_ad"
      | "oauth2:bitbucket"
      | "oauth2:discord"
      | "oauth2:facebook"
      | "oauth2:github"
      | "oauth2:gitlab"
      | "oauth2:google"
      | "oauth2:linkedin"
      | "oauth2:microsoft"
      | "oauth2:patreon"
      | "oauth2:slack"
      | "oauth2:stripe"
      | "oauth2:twitch"
      | "oauth2:twitter"
      | "oauth2:xero"
      | "saml:custom"
      | "wsfed:azure_ad";
    /**
     * Client IDs of applications in which this connection is to be enabled.
     */
    enabled_applications?: Array<string>;
    /**
     * The connection's options (varies by strategy).
     */
    options?: {
      [key: string]: unknown;
    };
  };
};

export type CreateConnectionResponse = create_connection_response;

export type GetConnectionData = {
  /**
   * The unique identifier for the connection.
   */
  connectionId: string;
};

export type GetConnectionResponse = connection;

export type UpdateConnectionData = {
  /**
   * The unique identifier for the connection.
   */
  connectionId: string;
  /**
   * The fields of the connection to update.
   */
  requestBody: {
    /**
     * The internal name of the connection.
     */
    name?: string;
    /**
     * The public facing name of the connection.
     */
    display_name?: string;
    /**
     * Client IDs of applications in which this connection is to be enabled.
     */
    enabled_applications?: Array<string>;
    /**
     * The connection's options (varies by strategy).
     */
    options?: {
      [key: string]: unknown;
    };
  };
};

export type UpdateConnectionResponse = success_response;

export type DeleteConnectionData = {
  /**
   * The identifier for the connection.
   */
  connectionId: string;
};

export type DeleteConnectionResponse = success_response;

export type DeleteEnvironementFeatureFlagOverridesResponse = success_response;

export type GetEnvironementFeatureFlagsResponse =
  get_environment_feature_flags_response;

export type DeleteEnvironementFeatureFlagOverrideData = {
  /**
   * The identifier for the feature flag.
   */
  featureFlagKey: string;
};

export type DeleteEnvironementFeatureFlagOverrideResponse = success_response;

export type UpdateEnvironementFeatureFlagOverrideData = {
  /**
   * The identifier for the feature flag.
   */
  featureFlagKey: string;
  /**
   * Flag details.
   */
  requestBody: {
    /**
     * The flag override value.
     */
    value: string;
  };
};

export type UpdateEnvironementFeatureFlagOverrideResponse = success_response;

export type CreateFeatureFlagData = {
  /**
   * Flag details.
   */
  requestBody: {
    /**
     * The name of the flag.
     */
    name: string;
    /**
     * Description of the flag purpose.
     */
    description?: string;
    /**
     * The flag identifier to use in code.
     */
    key: string;
    /**
     * The variable type.
     */
    type: "str" | "int" | "bool";
    /**
     * Allow the flag to be overridden at a different level.
     */
    allow_override_level?: "env" | "org" | "usr";
    /**
     * Default value for the flag used by environments and organizations.
     */
    default_value: string;
  };
};

export type CreateFeatureFlagResponse = success_response;

export type DeleteFeatureFlagData = {
  /**
   * The identifier for the feature flag.
   */
  featureFlagKey: string;
};

export type DeleteFeatureFlagResponse = success_response;

export type UpdateFeatureFlagData = {
  /**
   * Allow the flag to be overridden at a different level.
   */
  allowOverrideLevel: "env" | "org";
  /**
   * Default value for the flag used by environments and organizations.
   */
  defaultValue: string;
  /**
   * Description of the flag purpose.
   */
  description: string;
  /**
   * The key identifier for the feature flag.
   */
  featureFlagKey: string;
  /**
   * The name of the flag.
   */
  name: string;
  /**
   * The variable type
   */
  type: "str" | "int" | "bool";
};

export type UpdateFeatureFlagResponse = success_response;

export type GetOrganizationData = {
  /**
   * The organization's code.
   */
  code?: string;
};

export type GetOrganizationResponse = organization;

export type CreateOrganizationData = {
  /**
   * Organization details.
   */
  requestBody: {
    /**
     * The organization's name.
     */
    name: string;
    /**
     * The organization's feature flag settings.
     */
    feature_flags?: {
      [key: string]: "str" | "int" | "bool";
    };
    /**
     * The organization's ID.
     */
    external_id?: string;
    /**
     * The organization's brand settings - background color.
     */
    background_color?: string;
    /**
     * The organization's brand settings - button color.
     */
    button_color?: string;
    /**
     * The organization's brand settings - button text color.
     */
    button_text_color?: string;
    /**
     * The organization's brand settings - link color.
     */
    link_color?: string;
    /**
     * The organization's brand settings - dark mode background color.
     */
    background_color_dark?: string;
    /**
     * The organization's brand settings - dark mode button color.
     */
    button_color_dark?: string;
    /**
     * The organization's brand settings - dark mode button text color.
     */
    button_text_color_dark?: string;
    /**
     * The organization's brand settings - dark mode link color.
     */
    link_color_dark?: string;
    /**
     * The organization's brand settings - theme/mode 'light' | 'dark' | 'user_preference'.
     */
    theme_code?: string;
    /**
     * The organization's handle.
     */
    handle?: string;
    /**
     * Users can sign up to this organization.
     */
    is_allow_registrations?: boolean;
  };
};

export type CreateOrganizationResponse = create_organization_response;

export type UpdateOrganizationData = {
  /**
   * The identifier for the organization.
   */
  orgCode: string;
  /**
   * Organization details.
   */
  requestBody?: {
    /**
     * The organization's name.
     */
    name?: string;
    /**
     * The organization's ID.
     */
    external_id?: string;
    /**
     * The organization's brand settings - background color.
     */
    background_color?: string;
    /**
     * The organization's brand settings - button color.
     */
    button_color?: string;
    /**
     * The organization's brand settings - button text color.
     */
    button_text_color?: string;
    /**
     * The organization's brand settings - link color.
     */
    link_color?: string;
    /**
     * The organization's brand settings - dark mode background color.
     */
    background_color_dark?: string;
    /**
     * The organization's brand settings - dark mode button color.
     */
    button_color_dark?: string;
    /**
     * The organization's brand settings - dark mode button text color.
     */
    button_text_color_dark?: string;
    /**
     * The organization's brand settings - dark mode link color.
     */
    link_color_dark?: string;
    /**
     * The organization's brand settings - theme/mode 'light' | 'dark' | 'user_preference'.
     */
    theme_code?: string;
    /**
     * The organization's handle.
     */
    handle?: string;
    /**
     * Users can sign up to this organization.
     */
    is_allow_registrations?: boolean;
  };
};

export type UpdateOrganizationResponse = success_response;

export type DeleteOrganizationData = {
  /**
   * The identifier for the organization.
   */
  orgCode: string;
};

export type DeleteOrganizationResponse = unknown;

export type GetOrganizationsData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Field and order to sort the result by.
   */
  sort?: "name_asc" | "name_desc" | "email_asc" | "email_desc" | null;
};

export type GetOrganizationsResponse = get_organizations_response;

export type GetOrganizationUsersData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Filter by user permissions comma separated (where all match)
   */
  permissions?: string;
  /**
   * Filter by user roles comma separated (where all match)
   */
  roles?: string;
  /**
   * Field and order to sort the result by.
   */
  sort?:
    | "name_asc"
    | "name_desc"
    | "email_asc"
    | "email_desc"
    | "id_asc"
    | "id_desc"
    | null;
};

export type GetOrganizationUsersResponse = get_organization_users_response;

export type AddOrganizationUsersData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  requestBody?: {
    /**
     * Users to be added to the organization.
     */
    users?: Array<{
      /**
       * The users id.
       */
      id?: string;
      /**
       * Role keys to assign to the user.
       */
      roles?: Array<string>;
      /**
       * Permission keys to assign to the user.
       */
      permissions?: Array<string>;
    }>;
  };
};

export type AddOrganizationUsersResponse =
  add_organization_users_response | void;

export type UpdateOrganizationUsersData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  requestBody?: {
    /**
     * Users to add, update or remove from the organization.
     */
    users?: Array<{
      /**
       * The users id.
       */
      id?: string;
      /**
       * Optional operation, set to 'delete' to remove the user from the organization.
       */
      operation?: string;
      /**
       * Role keys to assign to the user.
       */
      roles?: Array<string>;
      /**
       * Permission keys to assign to the user.
       */
      permissions?: Array<string>;
    }>;
  };
};

export type UpdateOrganizationUsersResponse =
  update_organization_users_response;

export type GetOrganizationUserRolesData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * The user's id.
   */
  userId: string;
};

export type GetOrganizationUserRolesResponse =
  get_organizations_user_roles_response;

export type CreateOrganizationUserRoleData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * Role details.
   */
  requestBody: {
    /**
     * The role id.
     */
    role_id?: string;
  };
  /**
   * The user's id.
   */
  userId: string;
};

export type CreateOrganizationUserRoleResponse = success_response;

export type DeleteOrganizationUserRoleData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * The role id.
   */
  roleId: string;
  /**
   * The user's id.
   */
  userId: string;
};

export type DeleteOrganizationUserRoleResponse = success_response;

export type GetOrganizationUserPermissionsData = {
  /**
   * Specify additional data to retrieve. Use "roles".
   */
  expand?: string | null;
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * The user's id.
   */
  userId: string;
};

export type GetOrganizationUserPermissionsResponse =
  get_organizations_user_permissions_response;

export type CreateOrganizationUserPermissionData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * Permission details.
   */
  requestBody: {
    /**
     * The permission id.
     */
    permission_id?: string;
  };
  /**
   * The user's id.
   */
  userId: string;
};

export type CreateOrganizationUserPermissionResponse = success_response;

export type DeleteOrganizationUserPermissionData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * The permission id.
   */
  permissionId: string;
  /**
   * The user's id.
   */
  userId: string;
};

export type DeleteOrganizationUserPermissionResponse = success_response;

export type RemoveOrganizationUserData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * The user's id.
   */
  userId: string;
};

export type RemoveOrganizationUserResponse = success_response;

export type GetOrganizationFeatureFlagsData = {
  /**
   * The identifier for the organization.
   */
  orgCode: string;
};

export type GetOrganizationFeatureFlagsResponse =
  get_organization_feature_flags_response;

export type DeleteOrganizationFeatureFlagOverridesData = {
  /**
   * The identifier for the organization.
   */
  orgCode: string;
};

export type DeleteOrganizationFeatureFlagOverridesResponse = success_response;

export type DeleteOrganizationFeatureFlagOverrideData = {
  /**
   * The identifier for the feature flag.
   */
  featureFlagKey: string;
  /**
   * The identifier for the organization.
   */
  orgCode: string;
};

export type DeleteOrganizationFeatureFlagOverrideResponse = success_response;

export type UpdateOrganizationFeatureFlagOverrideData = {
  /**
   * The identifier for the feature flag
   */
  featureFlagKey: string;
  /**
   * The identifier for the organization
   */
  orgCode: string;
  /**
   * Override value
   */
  value: string;
};

export type UpdateOrganizationFeatureFlagOverrideResponse = success_response;

export type UpdateOrganizationPropertyData = {
  /**
   * The identifier for the organization
   */
  orgCode: string;
  /**
   * The identifier for the property
   */
  propertyKey: string;
  /**
   * The new property value
   */
  value: string;
};

export type UpdateOrganizationPropertyResponse = success_response;

export type GetOrganizationPropertyValuesData = {
  /**
   * The organization's code.
   */
  orgCode: string;
};

export type GetOrganizationPropertyValuesResponse =
  get_property_values_response;

export type UpdateOrganizationPropertiesData = {
  /**
   * The identifier for the organization
   */
  orgCode: string;
  /**
   * Properties to update.
   */
  requestBody: {
    /**
     * Property keys and values
     */
    properties: {
      [key: string]: unknown;
    };
  };
};

export type UpdateOrganizationPropertiesResponse = success_response;

export type DeleteOrganizationHandleData = {
  /**
   * The organization's code.
   */
  orgCode: string;
};

export type DeleteOrganizationHandleResponse = success_response;

export type GetPermissionsData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Field and order to sort the result by.
   */
  sort?: "name_asc" | "name_desc" | "id_asc" | "id_desc" | null;
};

export type GetPermissionsResponse = get_permissions_response;

export type CreatePermissionData = {
  /**
   * Permission details.
   */
  requestBody?: {
    /**
     * The permission's name.
     */
    name?: string;
    /**
     * The permission's description.
     */
    description?: string;
    /**
     * The permission identifier to use in code.
     */
    key?: string;
  };
};

export type CreatePermissionResponse = success_response;

export type UpdatePermissionsData = {
  /**
   * The identifier for the permission.
   */
  permissionId: number;
  /**
   * Permission details.
   */
  requestBody?: {
    /**
     * The permission's name.
     */
    name?: string;
    /**
     * The permission's description.
     */
    description?: string;
    /**
     * The permission identifier to use in code.
     */
    key?: string;
  };
};

export type UpdatePermissionsResponse = success_response;

export type DeletePermissionData = {
  /**
   * The identifier for the permission.
   */
  permissionId: string;
};

export type DeletePermissionResponse = success_response;

export type GetPropertiesData = {
  /**
   * Filter results by User or Organization context
   */
  context?: "usr" | "org" | null;
  /**
   * The ID of the property to end before.
   */
  endingBefore?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * The ID of the property to start after.
   */
  startingAfter?: string | null;
};

export type GetPropertiesResponse = get_properties_response;

export type CreatePropertyData = {
  /**
   * Property details.
   */
  requestBody: {
    /**
     * The name of the property.
     */
    name: string;
    /**
     * Description of the property purpose.
     */
    description?: string;
    /**
     * The property identifier to use in code.
     */
    key: string;
    /**
     * The property type.
     */
    type: "single_line_text" | "multi_line_text";
    /**
     * The context that the property applies to.
     */
    context: "org" | "usr";
    /**
     * Whether the property can be included in id and access tokens.
     */
    is_private: boolean;
    /**
     * Which category the property belongs to.
     */
    category_id: string;
  };
};

export type CreatePropertyResponse = create_property_response;

export type UpdatePropertyData = {
  /**
   * The unique identifier for the property.
   */
  propertyId: string;
  /**
   * The fields of the property to update.
   */
  requestBody: {
    /**
     * The name of the property.
     */
    name: string;
    /**
     * Description of the property purpose.
     */
    description?: string;
    /**
     * Whether the property can be included in id and access tokens.
     */
    is_private: boolean;
    /**
     * Which category the property belongs to.
     */
    category_id: string;
  };
};

export type UpdatePropertyResponse = success_response;

export type DeletePropertyData = {
  /**
   * The unique identifier for the property.
   */
  propertyId: string;
};

export type DeletePropertyResponse = success_response;

export type GetCategoriesData = {
  /**
   * Filter the results by User or Organization context
   */
  context?: "usr" | "org" | null;
  /**
   * The ID of the category to end before.
   */
  endingBefore?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * The ID of the category to start after.
   */
  startingAfter?: string | null;
};

export type GetCategoriesResponse = get_categories_response;

export type CreateCategoryData = {
  /**
   * Category details.
   */
  requestBody: {
    /**
     * The name of the category.
     */
    name: string;
    /**
     * The context that the category applies to.
     */
    context: "org" | "usr";
  };
};

export type CreateCategoryResponse = create_category_response;

export type UpdateCategoryData = {
  /**
   * The unique identifier for the category.
   */
  categoryId: string;
  /**
   * The fields of the category to update.
   */
  requestBody: {
    /**
     * The name of the category.
     */
    name?: string;
  };
};

export type UpdateCategoryResponse = success_response;

export type GetRolesData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Field and order to sort the result by.
   */
  sort?: "name_asc" | "name_desc" | "id_asc" | "id_desc" | null;
};

export type GetRolesResponse = get_roles_response;

export type CreateRoleData = {
  /**
   * Role details.
   */
  requestBody?: {
    /**
     * The role's name.
     */
    name?: string;
    /**
     * The role's description.
     */
    description?: string;
    /**
     * The role identifier to use in code.
     */
    key?: string;
    /**
     * Set role as default for new users.
     */
    is_default_role?: boolean;
  };
};

export type CreateRoleResponse = success_response;

export type GetRolePermissionData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * The role's public id.
   */
  roleId: string;
  /**
   * Field and order to sort the result by.
   */
  sort?: "name_asc" | "name_desc" | "id_asc" | "id_desc" | null;
};

export type GetRolePermissionResponse = roles_permission_response;

export type UpdateRolePermissionsData = {
  requestBody: {
    /**
     * Permissions to add or remove from the role.
     */
    permissions?: Array<{
      /**
       * The permission id.
       */
      id?: string;
      /**
       * Optional operation, set to 'delete' to remove the permission from the role.
       */
      operation?: string;
    }>;
  };
  /**
   * The identifier for the role.
   */
  roleId: string;
};

export type UpdateRolePermissionsResponse = update_role_permissions_response;

export type RemoveRolePermissionData = {
  /**
   * The permission's public id.
   */
  permissionId: string;
  /**
   * The role's public id.
   */
  roleId: string;
};

export type RemoveRolePermissionResponse = success_response;

export type UpdateRolesData = {
  /**
   * Role details.
   */
  requestBody?: {
    /**
     * The role's name.
     */
    name: string;
    /**
     * The role's description.
     */
    description?: string;
    /**
     * The role identifier to use in code.
     */
    key: string;
    /**
     * Set role as default for new users.
     */
    is_default_role?: boolean;
  };
  /**
   * The identifier for the role.
   */
  roleId: string;
};

export type UpdateRolesResponse = success_response;

export type DeleteRoleData = {
  /**
   * The identifier for the role.
   */
  roleId: string;
};

export type DeleteRoleResponse = success_response;

export type GetSubscribersData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Field and order to sort the result by.
   */
  sort?: "name_asc" | "name_desc" | "email_asc" | "email_desc" | null;
};

export type GetSubscribersResponse = get_subscribers_response;

export type CreateSubscriberData = {
  /**
   * The email address of the subscriber.
   */
  email: string | null;
  /**
   * Subscriber's first name.
   */
  firstName: string;
  /**
   * Subscriber's last name.
   */
  lastName: string | null;
};

export type CreateSubscriberResponse = create_subscriber_success_response;

export type GetSubscriberData = {
  /**
   * The subscriber's id.
   */
  subscriberId: string;
};

export type GetSubscriberResponse = get_subscriber_response;

export type GetUsersData = {
  /**
   * Filter the results by email address. The query string should be comma separated and url encoded.
   */
  email?: string | null;
  /**
   * Specify additional data to retrieve. Use "organizations" and/or "identities".
   */
  expand?: string | null;
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * ID of the user to filter by.
   */
  userId?: string | null;
  /**
   * Filter the results by username. The query string should be comma separated and url encoded.
   */
  username?: string | null;
};

export type GetUsersResponse = users_response;

export type RefreshUserClaimsData = {
  /**
   * The id of the user whose claims needs to be updated.
   */
  userId: string;
};

export type RefreshUserClaimsResponse = success_response;

export type GetUserDataData = {
  /**
   * Specify additional data to retrieve. Use "organizations" and/or "identities".
   */
  expand?: string | null;
  /**
   * The user's id.
   */
  id: string;
};

export type GetUserDataResponse = user;

export type CreateUserData = {
  /**
   * The details of the user to create.
   */
  requestBody?: {
    /**
     * Basic information required to create a user.
     */
    profile?: {
      /**
       * User's first name.
       */
      given_name?: string;
      /**
       * User's last name.
       */
      family_name?: string;
    };
    /**
     * The unique code associated with the organization you want the user to join.
     */
    organization_code?: string;
    /**
     * Array of identities to assign to the created user
     */
    identities?: Array<{
      /**
       * The type of identity to create, for e.g. email.
       */
      type?: "email" | "phone" | "username";
      /**
       * Additional details required to create the user.
       */
      details?: {
        /**
         * The email address of the user.
         */
        email?: string;
        /**
         * The phone number of the user.
         */
        phone?: string;
        /**
         * The username of the user.
         */
        username?: string;
      };
    }>;
  };
};

export type CreateUserResponse = create_user_response;

export type UpdateUserData = {
  /**
   * The user's id.
   */
  id: string;
  /**
   * The user to update.
   */
  requestBody: {
    /**
     * User's first name.
     */
    given_name?: string;
    /**
     * User's last name.
     */
    family_name?: string;
    /**
     * Whether the user is currently suspended or not.
     */
    is_suspended?: boolean;
    /**
     * Prompt the user to change their password on next sign in.
     */
    is_password_reset_requested?: boolean;
  };
};

export type UpdateUserResponse = update_user_response;

export type DeleteUserData = {
  /**
   * The user's id.
   */
  id: string;
  /**
   * Delete all data and remove the user's profile from all of Kinde, including the subscriber list
   */
  isDeleteProfile?: boolean;
};

export type DeleteUserResponse = success_response;

export type UpdateUserFeatureFlagOverrideData = {
  /**
   * The identifier for the feature flag
   */
  featureFlagKey: string;
  /**
   * The identifier for the user
   */
  userId: string;
  /**
   * Override value
   */
  value: string;
};

export type UpdateUserFeatureFlagOverrideResponse = success_response;

export type UpdateUserPropertyData = {
  /**
   * The identifier for the property
   */
  propertyKey: string;
  /**
   * The identifier for the user
   */
  userId: string;
  /**
   * The new property value
   */
  value: string;
};

export type UpdateUserPropertyResponse = success_response;

export type GetUserPropertyValuesData = {
  /**
   * The user's ID.
   */
  userId: string;
};

export type GetUserPropertyValuesResponse = get_property_values_response;

export type UpdateUserPropertiesData = {
  /**
   * Properties to update.
   */
  requestBody: {
    /**
     * Property keys and values
     */
    properties: {
      [key: string]: unknown;
    };
  };
  /**
   * The identifier for the user
   */
  userId: string;
};

export type UpdateUserPropertiesResponse = success_response;

export type SetUserPasswordData = {
  /**
   * Password details.
   */
  requestBody: {
    /**
     * The hashed password.
     */
    hashed_password: string;
    /**
     * The hashing method or algorithm used to encrypt the user’s password. Default is bcrypt.
     */
    hashing_method?: "bcrypt" | "crypt" | "md5" | "wordpress";
    /**
     * Extra characters added to passwords to make them stronger. Not required for bcrypt.
     */
    salt?: string;
    /**
     * Position of salt in password string. Not required for bcrypt.
     */
    salt_position?: "prefix" | "suffix";
    /**
     * The user will be prompted to set a new password after entering this one.
     */
    is_temporary_password?: boolean;
  };
  /**
   * The identifier for the user
   */
  userId: string;
};

export type SetUserPasswordResponse = success_response;

export type GetEventData = {
  /**
   * The event id.
   */
  eventId: string;
};

export type GetEventResponse = get_event_response;

export type GetEventTypesResponse = get_event_types_response;

export type DeleteWebHookData = {
  /**
   * The webhook id.
   */
  webhookId: string;
};

export type DeleteWebHookResponse = delete_webhook_response;

export type GetWebHooksResponse = get_webhooks_response;

export type CreateWebHookData = {
  /**
   * Webhook request specification.
   */
  requestBody: {
    /**
     * The webhook endpoint url
     */
    endpoint: string;
    /**
     * Array of event type keys
     */
    event_types: Array<string>;
    /**
     * The webhook name
     */
    name: string;
    /**
     * The webhook description
     */
    description?: string | null;
  };
};

export type CreateWebHookResponse = create_webhook_response;

export type UpdateWebHookData = {
  /**
   * Update webhook request specification.
   */
  requestBody: {
    /**
     * Array of event type keys
     */
    event_types?: Array<string>;
    /**
     * The webhook name
     */
    name?: string;
    /**
     * The webhook description
     */
    description?: string | null;
  };
};

export type UpdateWebHookResponse = update_webhook_response;

export type $OpenApiTs = {
  "/oauth2/user_profile": {
    get: {
      res: {
        /**
         * Details of logged in user V1.
         */
        200: user_profile;
        /**
         * Invalid credentials.
         */
        403: unknown;
      };
    };
  };
  "/oauth2/introspect": {
    post: {
      req: TokenIntrospectionData;
      res: {
        /**
         * Details of the token.
         */
        200: token_introspect;
        /**
         * Bad request.
         */
        401: token_error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/oauth2/revoke": {
    post: {
      req: TokenRevocationData;
      res: {
        /**
         * Token successfully revoked.
         */
        200: unknown;
        /**
         * Bad request.
         */
        401: token_error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/oauth2/v2/user_profile": {
    get: {
      res: {
        /**
         * Details of logged in user V2.
         */
        200: user_profile_v2;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/apis": {
    get: {
      res: {
        /**
         * APIs successfully retrieved.
         */
        200: apis;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: AddApIsData;
      res: {
        /**
         * APIs successfully updated
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/apis/{api_id}": {
    get: {
      req: GetApiData;
      res: {
        /**
         * API successfully retrieved.
         */
        200: api;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    delete: {
      req: DeleteApiData;
      res: {
        /**
         * API successfully deleted.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/apis/{api_id}/applications": {
    patch: {
      req: UpdateApiApplicationsData;
      res: {
        /**
         * API applications updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/applications": {
    get: {
      req: GetApplicationsData;
      res: {
        /**
         * A successful response with a list of applications or an empty list.
         */
        200: get_applications_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: CreateApplicationData;
      res: {
        /**
         * Application successfully created.
         */
        200: create_application_response;
        /**
         * Error creating user.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/applications/{application_id}": {
    get: {
      req: GetApplicationData;
      res: {
        /**
         * Application successfully retrieved.
         */
        200: get_application_response;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    patch: {
      req: UpdateApplicationData;
      res: {
        /**
         * Application successfully updated.
         */
        200: unknown;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    delete: {
      req: DeleteApplicationData;
      res: {
        /**
         * Application successfully deleted.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/applications/{application_id}/connections": {
    get: {
      req: GetApplicationConnectionsData;
      res: {
        /**
         * Application connections successfully retrieved.
         */
        200: get_connections_response;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/applications/{application_id}/connections/{connection_id}": {
    post: {
      req: EnableConnectionData;
      res: {
        /**
         * Connection successfully enabled.
         */
        200: unknown;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    delete: {
      req: RemoveConnectionData;
      res: {
        /**
         * Connection successfully removed.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/business": {
    get: {
      req: GetBusinessData;
      res: {
        /**
         * A successful response with your business details.
         */
        201: success_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    patch: {
      req: UpdateBusinessData;
      res: {
        /**
         * Business successfully updated.
         */
        201: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/industries": {
    get: {
      req: GetIndustriesData;
      res: {
        /**
         * A successful response with a list of industries and industry keys.
         */
        201: success_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/timezones": {
    get: {
      req: GetTimezonesData;
      res: {
        /**
         * A successful response with a list of timezones and timezone keys.
         */
        201: success_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/applications/{app_id}/auth_redirect_urls": {
    get: {
      req: GetCallbackUrLsData;
      res: {
        /**
         * Callback URLs successfully retrieved.
         */
        200: redirect_callback_urls;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: AddRedirectCallbackUrLsData;
      res: {
        /**
         * Callbacks successfully updated
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    put: {
      req: ReplaceRedirectCallbackUrLsData;
      res: {
        /**
         * Callbacks successfully updated
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    delete: {
      req: DeleteCallbackUrLsData;
      res: {
        /**
         * Callback URLs successfully deleted.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/applications/{app_id}/auth_logout_urls": {
    get: {
      req: GetLogoutUrLsData;
      res: {
        /**
         * Logout URLs successfully retrieved.
         */
        200: logout_redirect_urls;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: AddLogoutRedirectUrLsData;
      res: {
        /**
         * Logouts successfully updated
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    put: {
      req: ReplaceLogoutRedirectUrLsData;
      res: {
        /**
         * Logout URLs successfully updated
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    delete: {
      req: DeleteLogoutUrLsData;
      res: {
        /**
         * Logout URLs successfully deleted.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/connected_apps/auth_url": {
    get: {
      req: GetConnectedAppAuthUrlData;
      res: {
        /**
         * A URL that can be used to authenticate and a session id to identify this authentication session.
         */
        200: connected_apps_auth_url;
        /**
         * Error retrieving connected app auth url.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Error retrieving connected app auth url.
         */
        404: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/connected_apps/token": {
    get: {
      req: GetConnectedAppTokenData;
      res: {
        /**
         * An access token that can be used to query a third-party provider, as well as the token's expiry time.
         */
        200: connected_apps_access_token;
        /**
         * The session id provided points to an invalid session.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/connected_apps/revoke": {
    post: {
      req: RevokeConnectedAppTokenData;
      res: {
        /**
         * An access token that can be used to query a third-party provider, as well as the token's expiry time.
         */
        200: success_response;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Invalid HTTP method used.
         */
        405: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/connections": {
    get: {
      req: GetConnectionsData;
      res: {
        /**
         * Connections successfully retrieved.
         */
        200: get_connections_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: CreateConnectionData;
      res: {
        /**
         * Connection successfully created
         */
        201: create_connection_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/connections/{connection_id}": {
    get: {
      req: GetConnectionData;
      res: {
        /**
         * Connection successfully retrieved.
         */
        200: connection;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    patch: {
      req: UpdateConnectionData;
      res: {
        /**
         * Connection successfully updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    delete: {
      req: DeleteConnectionData;
      res: {
        /**
         * Connection deleted.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/environment/feature_flags": {
    delete: {
      res: {
        /**
         * Feature flag overrides deleted successfully.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    get: {
      res: {
        /**
         * Feature flags retrieved successfully.
         */
        200: get_environment_feature_flags_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/environment/feature_flags/{feature_flag_key}": {
    delete: {
      req: DeleteEnvironementFeatureFlagOverrideData;
      res: {
        /**
         * Feature flag deleted successfully.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    patch: {
      req: UpdateEnvironementFeatureFlagOverrideData;
      res: {
        /**
         * Feature flag override successful
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/feature_flags": {
    post: {
      req: CreateFeatureFlagData;
      res: {
        /**
         * Feature flag successfully created
         */
        201: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/feature_flags/{feature_flag_key}": {
    delete: {
      req: DeleteFeatureFlagData;
      res: {
        /**
         * Feature flag successfully updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    put: {
      req: UpdateFeatureFlagData;
      res: {
        /**
         * Feature flag successfully updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organization": {
    get: {
      req: GetOrganizationData;
      res: {
        /**
         * Organization successfully retrieved.
         */
        200: organization;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: CreateOrganizationData;
      res: {
        /**
         * Organization successfully created.
         */
        200: create_organization_response;
        /**
         * Error creating user.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
        /**
         * Could not create organization.
         */
        500: unknown;
      };
    };
  };
  "/api/v1/organization/{org_code}": {
    patch: {
      req: UpdateOrganizationData;
      res: {
        /**
         * Organization successfully updated.
         */
        200: success_response;
        /**
         * Error updating organization.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    delete: {
      req: DeleteOrganizationData;
      res: {
        /**
         * Organization successfully deleted.
         */
        200: unknown;
        /**
         * Error deleting organization.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organizations": {
    get: {
      req: GetOrganizationsData;
      res: {
        /**
         * A successful response with a list of organizations or an empty list.
         */
        200: get_organizations_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organizations/{org_code}/users": {
    get: {
      req: GetOrganizationUsersData;
      res: {
        /**
         * A successful response with a list of organization users or an empty list.
         */
        200: get_organization_users_response;
        /**
         * Error creating user
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: AddOrganizationUsersData;
      res: {
        /**
         * Users successfully added.
         */
        200: add_organization_users_response;
        /**
         * No users added.
         */
        204: void;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    patch: {
      req: UpdateOrganizationUsersData;
      res: {
        /**
         * Users successfully removed.
         */
        200: update_organization_users_response;
        /**
         * Error updating organization user.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organizations/{org_code}/users/{user_id}/roles": {
    get: {
      req: GetOrganizationUserRolesData;
      res: {
        /**
         * A successful response with a list of user roles.
         */
        200: get_organizations_user_roles_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: CreateOrganizationUserRoleData;
      res: {
        /**
         * Role successfully added.
         */
        200: success_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}": {
    delete: {
      req: DeleteOrganizationUserRoleData;
      res: {
        /**
         * User successfully removed.
         */
        200: success_response;
        /**
         * Error creating user.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organizations/{org_code}/users/{user_id}/permissions": {
    get: {
      req: GetOrganizationUserPermissionsData;
      res: {
        /**
         * A successful response with a list of user permissions.
         */
        200: get_organizations_user_permissions_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: CreateOrganizationUserPermissionData;
      res: {
        /**
         * User permission successfully updated.
         */
        200: success_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}": {
    delete: {
      req: DeleteOrganizationUserPermissionData;
      res: {
        /**
         * User successfully removed.
         */
        200: success_response;
        /**
         * Error creating user.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organizations/{org_code}/users/{user_id}": {
    delete: {
      req: RemoveOrganizationUserData;
      res: {
        /**
         * User successfully removed from organization
         */
        200: success_response;
        /**
         * Error removing user
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organizations/{org_code}/feature_flags": {
    get: {
      req: GetOrganizationFeatureFlagsData;
      res: {
        /**
         * Feature flag overrides successfully returned.
         */
        200: get_organization_feature_flags_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    delete: {
      req: DeleteOrganizationFeatureFlagOverridesData;
      res: {
        /**
         * Feature flag overrides successfully deleted.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}": {
    delete: {
      req: DeleteOrganizationFeatureFlagOverrideData;
      res: {
        /**
         * Feature flag override successfully deleted.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    patch: {
      req: UpdateOrganizationFeatureFlagOverrideData;
      res: {
        /**
         * Feature flag override successfully updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organizations/{org_code}/properties/{property_key}": {
    put: {
      req: UpdateOrganizationPropertyData;
      res: {
        /**
         * Property successfully updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organizations/{org_code}/properties": {
    get: {
      req: GetOrganizationPropertyValuesData;
      res: {
        /**
         * Properties successfully retrieved.
         */
        200: get_property_values_response;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    patch: {
      req: UpdateOrganizationPropertiesData;
      res: {
        /**
         * Properties successfully updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/organization/{org_code}/handle": {
    delete: {
      req: DeleteOrganizationHandleData;
      res: {
        /**
         * Handle successfully deleted.
         */
        200: success_response;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/permissions": {
    get: {
      req: GetPermissionsData;
      res: {
        /**
         * Permissions successfully retrieved.
         */
        200: get_permissions_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: CreatePermissionData;
      res: {
        /**
         * Permission successfully created
         */
        201: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/permissions/{permission_id}": {
    patch: {
      req: UpdatePermissionsData;
      res: {
        /**
         * Permission successfully updated
         */
        201: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    delete: {
      req: DeletePermissionData;
      res: {
        /**
         * permission successfully updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/properties": {
    get: {
      req: GetPropertiesData;
      res: {
        /**
         * Properties successfully retrieved.
         */
        200: get_properties_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: CreatePropertyData;
      res: {
        /**
         * Property successfully created
         */
        201: create_property_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/properties/{property_id}": {
    put: {
      req: UpdatePropertyData;
      res: {
        /**
         * Property successfully updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    delete: {
      req: DeletePropertyData;
      res: {
        /**
         * Property successfully deleted.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/property_categories": {
    get: {
      req: GetCategoriesData;
      res: {
        /**
         * Categories successfully retrieved.
         */
        200: get_categories_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: CreateCategoryData;
      res: {
        /**
         * Category successfully created
         */
        201: create_category_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/property_categories/{category_id}": {
    put: {
      req: UpdateCategoryData;
      res: {
        /**
         * category successfully updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/roles": {
    get: {
      req: GetRolesData;
      res: {
        /**
         * Roles successfully retrieved.
         */
        200: get_roles_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: CreateRoleData;
      res: {
        /**
         * Role successfully created
         */
        201: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
      };
    };
  };
  "/api/v1/roles/{role_id}/permissions": {
    get: {
      req: GetRolePermissionData;
      res: {
        /**
         * A list of permissions for a role
         */
        200: roles_permission_response;
        /**
         * Error removing user
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    patch: {
      req: UpdateRolePermissionsData;
      res: {
        /**
         * Permissions successfully updated.
         */
        200: update_role_permissions_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/roles/{role_id}/permissions/{permission_id}": {
    delete: {
      req: RemoveRolePermissionData;
      res: {
        /**
         * Permission successfully removed from role
         */
        200: success_response;
        /**
         * Error removing user
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/roles/{role_id}": {
    patch: {
      req: UpdateRolesData;
      res: {
        /**
         * Role successfully updated
         */
        201: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    delete: {
      req: DeleteRoleData;
      res: {
        /**
         * Role successfully deleted.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/subscribers": {
    get: {
      req: GetSubscribersData;
      res: {
        /**
         * Subscriber successfully retrieved.
         */
        200: get_subscribers_response;
        /**
         * Bad request.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: CreateSubscriberData;
      res: {
        /**
         * Subscriber successfully created
         */
        201: create_subscriber_success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/subscribers/{subscriber_id}": {
    get: {
      req: GetSubscriberData;
      res: {
        /**
         * Subscriber successfully retrieved.
         */
        200: get_subscriber_response;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/users": {
    get: {
      req: GetUsersData;
      res: {
        /**
         * Users successfully retrieved.
         */
        200: users_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/users/{user_id}/refresh_claims": {
    post: {
      req: RefreshUserClaimsData;
      res: {
        /**
         * Claims successfully refreshed.
         */
        200: success_response;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Bad request.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/user": {
    get: {
      req: GetUserDataData;
      res: {
        /**
         * User successfully updated.
         */
        200: user;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: CreateUserData;
      res: {
        /**
         * User successfully created.
         */
        200: create_user_response;
        /**
         * Error creating user.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    patch: {
      req: UpdateUserData;
      res: {
        /**
         * User successfully updated.
         */
        200: update_user_response;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    delete: {
      req: DeleteUserData;
      res: {
        /**
         * User successfully deleted.
         */
        200: success_response;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/users/{user_id}/feature_flags/{feature_flag_key}": {
    patch: {
      req: UpdateUserFeatureFlagOverrideData;
      res: {
        /**
         * Feature flag override successfully updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/users/{user_id}/properties/{property_key}": {
    put: {
      req: UpdateUserPropertyData;
      res: {
        /**
         * Property successfully updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/users/{user_id}/properties": {
    get: {
      req: GetUserPropertyValuesData;
      res: {
        /**
         * Properties successfully retrieved.
         */
        200: get_property_values_response;
        /**
         * Bad request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    patch: {
      req: UpdateUserPropertiesData;
      res: {
        /**
         * Properties successfully updated.
         */
        200: success_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/users/{user_id}/password": {
    put: {
      req: SetUserPasswordData;
      res: {
        /**
         * User successfully created.
         */
        200: success_response;
        /**
         * Error creating user.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: unknown;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/events/{event_id}": {
    get: {
      req: GetEventData;
      res: {
        /**
         * Event successfully retrieved.
         */
        200: get_event_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/event_types": {
    get: {
      res: {
        /**
         * Event types successfully retrieved.
         */
        200: get_event_types_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/webhooks/{webhook_id}": {
    delete: {
      req: DeleteWebHookData;
      res: {
        /**
         * Webhook successfully deleted.
         */
        200: delete_webhook_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
  "/api/v1/webhooks": {
    get: {
      res: {
        /**
         * Webhook list successfully returned.
         */
        200: get_webhooks_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    post: {
      req: CreateWebHookData;
      res: {
        /**
         * Webhook successfully created.
         */
        200: create_webhook_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
    patch: {
      req: UpdateWebHookData;
      res: {
        /**
         * Webhook successfully updated.
         */
        200: update_webhook_response;
        /**
         * Invalid request.
         */
        400: error_response;
        /**
         * Invalid credentials.
         */
        403: error_response;
        /**
         * Request was throttled.
         */
        429: unknown;
      };
    };
  };
};
